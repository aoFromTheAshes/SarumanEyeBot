# db/crud.py

from sqlmodel import Session, select
from db.models import Task, User
from datetime import datetime, timezone
import time

# =====================================================
# USERS
# =====================================================

def create_user(db: Session, telegram_id: int, username: str):
    """
    –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î.
    –Ø–∫—â–æ username –∑–º—ñ–Ω–∏–≤—Å—è ‚Äì –æ–Ω–æ–≤–∏—Ç–∏.
    """
    user = db.exec(select(User).where(User.telegram_id == telegram_id)).first()
    if not user:
        new_user = User(telegram_id=telegram_id, username=username)
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        return new_user
    else:
        if user.username != username:
            user.username = username
            db.commit()
            db.refresh(user)
        return user


def get_user_by_telegram_id(db: Session, telegram_id: int):
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id.
    """
    return db.exec(select(User).where(User.telegram_id == telegram_id)).first()


def update_username(db: Session, telegram_id: int, new_username: str):
    """
    –û–Ω–æ–≤–∏—Ç–∏ username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    user = get_user_by_telegram_id(db, telegram_id)
    if user:
        user.username = new_username
        db.commit()
        db.refresh(user)
    return user

# =====================================================
# TASKS
# =====================================================

def create_task(db: Session, user_id: int, name: str):
    start_time = int(time.time())
    
    new_task = Task(
        user_id=user_id,
        name=name,
        start_time=start_time
    )
    db.add(new_task)
    db.commit()
    db.refresh(new_task)
    return new_task


def get_tasks_by_user(db: Session, user_id: int):
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    tasks = db.exec(select(Task).where(Task.user_id == user_id)).all()
    return tasks


def get_task_by_id(db: Session, task_id: int):
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ –π–æ–≥–æ ID.
    """
    return db.exec(select(Task).where(Task.id == task_id)).first()


def update_task(db: Session, task_id: int, **kwargs):
    """
    üîß –û–Ω–æ–≤–ª—é—î –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –ë–î.

    ‚û°Ô∏è –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É:
        update_task(db, 5, end_time=datetime.now(), duration=30)

    üìå –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - db: —Å–µ—Å—ñ—è –ë–î
    - task_id: ID –∑–∞–≤–¥–∞–Ω–Ω—è
    - kwargs: –ø–∞—Ä–∏ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    """

    # –û—Ç—Ä–∏–º–∞—Ç–∏ task –∑–∞ id
    task = get_task_by_id(db, task_id)
    if not task:
        return None

    # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–ª—è
    for key, value in kwargs.items():
        if hasattr(task, key):
            setattr(task, key, value)
        else:
            raise ValueError(f"Task has no attribute '{key}'")

    db.commit()
    db.refresh(task)
    return task


def delete_task(db: Session, task_id: int):
    """
    –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ ID.
    """
    task = get_task_by_id(db, task_id)
    if not task:
        return None

    db.delete(task)
    db.commit()
    return True



def get_active_task_by_user(db: Session, user_id: int):
    statement = select(Task).where(
        (Task.user_id == user_id) & (Task.end_time == None)
    ).limit(1)

    result = db.exec(statement).first()
    return result
